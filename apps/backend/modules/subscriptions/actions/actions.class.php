<?php
// auto-generated by sfPropelCrud
// date: 2008/05/07 13:20:11
?>
<?php

/**
 * subscriptions actions.
 *
 * @package    pr
 * @subpackage subscriptions
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class subscriptionsActions extends sfActions
{
  public function executeList()
  {
    $c = new Criteria();
    $c->addAscendingOrderByColumn(SubscriptionDetailsPeer::CAT_ID);
    $c->addAscendingOrderByColumn(SubscriptionDetailsPeer::AMOUNT);
    $this->subscriptions = SubscriptionDetailsPeer::doSelectJoinAll($c);
  }

  public function executeEdit()
  {
    $c = new Criteria();
    $c->add(SubscriptionDetailsPeer::CAT_ID, $this->getRequestParameter('cat_id'));
    $c->addAscendingOrderByColumn(SubscriptionDetailsPeer::AMOUNT);
    $subscriptions = SubscriptionDetailsPeer::doSelect($c);
    $this->forward404Unless($subscriptions);
    
    if( $this->getRequest()->getMethod() == sfRequest::POST )
    {
        $this->getUser()->checkPerm(array('subscriptions_edit'));
        $req_subs = $this->getRequestParameter('subs');
        foreach ($subscriptions as $subscription)
        {
            if( array_key_exists($subscription->getSubscriptionId(), $req_subs) )
            {
                $subscription->setCanCreateProfile($req_subs[$subscription->getSubscriptionId()]['can_create_profile']);
                $subscription->setCreateProfiles($req_subs[$subscription->getSubscriptionId()]['create_profiles']);
                $subscription->setCanPostPhoto($req_subs[$subscription->getSubscriptionId()]['can_post_photo']);
                $subscription->setPostPhotos($req_subs[$subscription->getSubscriptionId()]['post_photos']);
                $subscription->setCanPostPrivatePhoto($req_subs[$subscription->getSubscriptionId()]['can_post_private_photo']);
                $subscription->setPostPrivatePhotos($req_subs[$subscription->getSubscriptionId()]['post_private_photos']);
                $subscription->setCanWink($req_subs[$subscription->getSubscriptionId()]['can_wink']);
                $subscription->setWinks($req_subs[$subscription->getSubscriptionId()]['winks']);
                $subscription->setWinksDay($req_subs[$subscription->getSubscriptionId()]['winks_day']);
                $subscription->setCanReadMessages($req_subs[$subscription->getSubscriptionId()]['can_read_messages']);
                $subscription->setReadMessages($req_subs[$subscription->getSubscriptionId()]['read_messages']);
                $subscription->setReadMessagesDay($req_subs[$subscription->getSubscriptionId()]['read_messages_day']);
                $subscription->setCanReplyMessages($req_subs[$subscription->getSubscriptionId()]['can_reply_messages']);
                $subscription->setReplyMessages($req_subs[$subscription->getSubscriptionId()]['reply_messages']);
                $subscription->setReplyMessagesDay($req_subs[$subscription->getSubscriptionId()]['reply_messages_day']);
                $subscription->setCanSendMessages($req_subs[$subscription->getSubscriptionId()]['can_send_messages']);
                $subscription->setSendMessages($req_subs[$subscription->getSubscriptionId()]['send_messages']);
                $subscription->setSendMessagesDay($req_subs[$subscription->getSubscriptionId()]['send_messages_day']);
                $subscription->setCanSeeViewed($req_subs[$subscription->getSubscriptionId()]['can_see_viewed']);
                $subscription->setSeeViewed($req_subs[$subscription->getSubscriptionId()]['see_viewed']);
                $subscription->setCanContactAssistant($req_subs[$subscription->getSubscriptionId()]['can_contact_assistant']);
                $subscription->setContactAssistant($req_subs[$subscription->getSubscriptionId()]['contact_assistant']);
                $subscription->setContactAssistantDay($req_subs[$subscription->getSubscriptionId()]['contact_assistant_day']);
                $subscription->setPreApprove(@$req_subs[$subscription->getSubscriptionId()]['pre_approve']);
                
                if( isset($req_subs[$subscription->getSubscriptionId()]['period']) )
                {
                    $subscription->setPeriod($req_subs[$subscription->getSubscriptionId()]['period']);
                    $subscription->setPeriodType($req_subs[$subscription->getSubscriptionId()]['period_type']);
                    $subscription->setAmount($req_subs[$subscription->getSubscriptionId()]['amount']);
                    $subscription->setCurrency($req_subs[$subscription->getSubscriptionId()]['currency']);
                }
                
                $subscription->save();
            }
        }
        
	    return $this->redirect('subscriptions/list');
    }
    
    $this->subscriptions = $subscriptions;
    $this->sub1 = $subscriptions[0];
  }

  public function validateEdit()
  {
    if( $this->getRequest()->getMethod() == sfRequest::POST )
    {   
        $req_subs = $this->getRequestParameter('subs');
        
        foreach($req_subs as $id => $sub)
        {
            if( $id == 1 ) continue; //skip the free subscription
            
          $field_name = 'subs['. $id.'][period]';
        
          if( !is_numeric($sub['period']) || $sub['period'] <= 0 )
          {
              $this->getRequest()->setError($field_name, 'Please enter a positive integer');
              return false;
            
          }
        
          //regular subscription
          switch ($sub['period_type']) {
              case 'D':
                  if( $sub['period'] > 90 )
                  {
                      $this->getRequest()->setError($field_name, 'Allowable range is 1 to 90');
                      return false;
                  }
                  break;
              case 'W':
                  if( $sub['period'] > 52 )
                  {
                      $this->getRequest()->setError($field_name, 'Allowable range is 1 to 52');
                      return false;
                  }            
                  break;
              case 'M':
                  if( $sub['period'] > 24 )
                  {
                      $this->getRequest()->setError($field_name, 'Allowable range is 1 to 24');
                      return false;
                  }            
                  break;
              case 'Y':
                  if( $sub['period'] > 5 )
                  {
                      $this->getRequest()->setError($field_name, 'Allowable range is 1 to 5');
                      return false;
                  }            
                  break;
              default:
                  break;
          }
        }
    }
    
    return true;
  }
  
    public function handleErrorEdit()
    {
        $c = new Criteria();
        $c->add(SubscriptionDetailsPeer::CAT_ID, $this->getRequestParameter('cat_id'));
        $c->addAscendingOrderByColumn(SubscriptionDetailsPeer::AMOUNT);
        $subscriptions = SubscriptionDetailsPeer::doSelect($c);
        $this->forward404Unless($subscriptions);

        $this->subscriptions = $subscriptions;
        $this->sub1 = $subscriptions[0];  

        return sfView::SUCCESS;    
    }
}
